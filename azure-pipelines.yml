# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

variables:
  ComposerUpdate: False
  BotProjectUpdate: False

jobs:
  - job: judge
    displayName: Check Changes
    steps:
    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script:  '$editedFiles = git diff HEAD HEAD~ --name-only
                  $editedFiles | ForEach-Object {
                      Switch -Wildcard ($_ ) {
                          ''''Composer/*'''' { Write-Output "##vso[task.setvariable variable=ComposerUpdate]True" }
                          ''''BotProject/*'''' { Write-Output "##vso[task.setvariable variable=BotProjectUpdate]True" }
                      }
                  }'
                  
  - job: botproject
    condition: and(succeeded(), eq(variables['BotProjectUpdate'], 'True'))
    displayName: BotProject Build&Test
    pool:
      vmImage: ubuntu-16.04
    steps:
    - task: DotNetCoreCLI@2
      inputs:
        command: 'build'
        projects: 'BotProject/CSharp/BotProject.csproj'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'build'
        projects: 'BotProject/CSharp/Tests/Tests.csproj'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: 'BotProject/CSharp/Tests/Tests.csproj'

  - job: test
    condition: and(succeeded(), eq(variables['ComposerUpdate'], 'True'))
    displayName: Unit Tests
    pool:
      vmImage: ubuntu-16.04
    steps:
    - task: NodeTool@0
      displayName: 'Use Node 10.15.3'
      inputs:
        versionSpec: 10.15.3
    - script: cd Composer && yarn install --network-concurrency 1
      displayName: 'yarn install'
    - script: cd Composer && yarn lint
      displayName: 'yarn lint'
    - script: cd Composer && yarn test:coverage
      displayName: 'yarn test:coverage'
      condition: succeededOrFailed()
    - task: PublishCodeCoverageResults@1
      displayName: 'Publish code coverage from Composer/coverage/cobertura-coverage.xml'
      condition: succeededOrFailed()
      inputs:
        codeCoverageTool: Cobertura
        summaryFileLocation: 'Composer/coverage/cobertura-coverage.xml'
        reportDirectory: 'Composer/coverage/lcov-report'
    - task: PublishTestResults@2
      displayName: Publish Unit Test Results
      condition: succeededOrFailed()
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/junit.xml'
        testRunTitle: Unit Tests
        mergeTestResults: true
  - job: e2e
    condition: and(succeeded(), eq(variables['ComposerUpdate'], 'True'))
    displayName: E2E Tests
    pool:
      vmImage: ubuntu-16.04
    steps:
    - task: NodeTool@0
      displayName: 'Use Node 10.15.3'
      inputs:
        versionSpec: 10.15.3
    - script: cd Composer && yarn install --network-concurrency 1
      displayName: 'yarn install'
    - script: cd Composer && yarn build
      displayName: 'yarn build'
    - script: cd Composer && yarn test:integration
      displayName: yarn test:integration
      env:
        CYPRESS_screenshotsFolder: $(Build.ArtifactStagingDirectory)/cypress/screenshots
        CYPRESS_COMPOSER_URL: http://localhost:5000
    - task: PublishBuildArtifacts@1
      condition: failed()
      inputs:
        pathtoPublish: '$(Build.ArtifactStagingDirectory)/cypress'
        artifactName: cypress
    - task: PublishTestResults@2
      displayName: Publish E2E Test Results
      condition: succeededOrFailed()
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/cypress/results/results-*.xml'
        testRunTitle: E2E Tests
        mergeTestResults: true

